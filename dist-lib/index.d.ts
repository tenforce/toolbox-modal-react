// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../focus-trap-react

declare module '@tenforce/toolbox-modal-react' {
    export { Modal, Container, Content, Overlay } from "@tenforce/toolbox-modal-react/Modal";
}

declare module '@tenforce/toolbox-modal-react/Modal' {
    import Modal from "@tenforce/toolbox-modal-react/Modal/Modal";
    import Container from "@tenforce/toolbox-modal-react/Modal/Container";
    import Content from "@tenforce/toolbox-modal-react/Modal/Content";
    import Overlay from "@tenforce/toolbox-modal-react/Modal/Overlay";
    export { Modal, Container, Content, Overlay };
}

declare module '@tenforce/toolbox-modal-react/Modal/Modal' {
    import { ReactNode } from "react";
    import { Props as ContainerProps } from "@tenforce/toolbox-modal-react/Modal/Container";
    import { Props as OverlayProps } from "@tenforce/toolbox-modal-react/Modal/Overlay";
    import { Props as ContentProps } from "@tenforce/toolbox-modal-react/Modal/Content";
    import { Props as InnerContentProps } from "@tenforce/toolbox-modal-react/Modal/InnerContent";
    import { Props as FocusTrapProps } from "focus-trap-react";
    export interface Props {
        children: ReactNode;
        containerProps?: Partial<ContainerProps>;
        containerSelector?: string;
        contentProps?: Partial<ContentProps>;
        focusTrapProps?: Partial<FocusTrapProps>;
        innerContentProps?: Partial<InnerContentProps>;
        isShown?: boolean;
        overlayProps?: Partial<OverlayProps>;
    }
    function Modal({ isShown, containerSelector, focusTrapProps, containerProps, overlayProps, contentProps, innerContentProps, children, }: Props): JSX.Element;
    namespace Modal {
        var displayName: string;
    }
    export default Modal;
}

declare module '@tenforce/toolbox-modal-react/Modal/Container' {
    import { HTMLAttributes } from "react";
    export const className = "toolbox-modal";
    import { Props as OverlayProps } from "@tenforce/toolbox-modal-react/Modal/Overlay";
    import { Props as ContentProps } from "@tenforce/toolbox-modal-react/Modal/Content";
    import { Props as InnerContentProps } from "@tenforce/toolbox-modal-react/Modal/InnerContent";
    import React from "react";
    export interface Props extends HTMLAttributes<HTMLDivElement> {
        overlayProps?: Partial<OverlayProps>;
        contentProps?: Partial<ContentProps>;
        innerContentProps?: Partial<InnerContentProps>;
        animationDuration?: number;
        isCenterPositioned?: boolean;
        isCenterFixedPositioned?: boolean;
        isTopFixedPositioned?: boolean;
        isAbsolutePositioned?: boolean;
        blockInteraction?: boolean;
        blockOverlayInteraction?: boolean;
        shouldCloseOnEscape?: boolean;
        targetSelector?: string;
        targetElement?: Element | null;
        targetRef?: React.RefObject<HTMLElement> | null;
        horizontalOffset?: number;
        verticalOffset?: number;
        extraClasses?: string;
        onClose?: () => void;
        willClose?: () => boolean | Promise<boolean>;
    }
    const Container: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
    export default Container;
}

declare module '@tenforce/toolbox-modal-react/Modal/Content' {
    import { HTMLAttributes, ReactNode, RefObject } from "react";
    import { Props as InnerContentProps } from "@tenforce/toolbox-modal-react/Modal/InnerContent";
    export const className: string;
    export interface Props extends HTMLAttributes<HTMLDivElement> {
        children?: ReactNode;
        innerContentProps?: InnerContentProps;
        isShown?: boolean;
        horizontalOffset?: number;
        verticalOffset?: number;
        targetSelector?: string;
        targetElement?: Element | null;
        targetRef?: RefObject<HTMLElement> | null;
        isFixed?: (elem?: Element | null) => boolean;
        extraClasses?: string;
    }
    const Content: {
        ({ children, innerContentProps, isShown, horizontalOffset, verticalOffset, targetSelector, targetElement, targetRef, isFixed, extraClasses, ...args }: Props): JSX.Element;
        displayName: string;
    };
    export default Content;
}

declare module '@tenforce/toolbox-modal-react/Modal/Overlay' {
    import { HTMLAttributes } from "react";
    export const className: string;
    export interface Props extends HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
        isHidden?: boolean;
        isLightColored?: boolean;
        isTransparent?: boolean;
        onClose?: (event: React.MouseEvent) => void;
    }
    const Overlay: {
        ({ extraClasses, isHidden, isLightColored, isTransparent, onClose, ...args }: Props): JSX.Element;
        displayName: string;
    };
    export default Overlay;
}

declare module '@tenforce/toolbox-modal-react/Modal/InnerContent' {
    import { ReactNode, HTMLAttributes } from "react";
    export const className: string;
    export interface Props extends HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
        children?: ReactNode;
    }
    const InnerContent: {
        ({ extraClasses, children, ...args }: Props): JSX.Element;
        displayName: string;
    };
    export default InnerContent;
}

